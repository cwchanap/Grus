name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DENO_VERSION: v1.40.x

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Deno
      uses: denoland/setup-deno@v1
      with:
        deno-version: ${{ env.DENO_VERSION }}
        
    - name: Cache dependencies
      run: deno cache --reload deno.json
      
    - name: Lint code
      run: deno lint
      
    - name: Format check
      run: deno fmt --check
      
    - name: Type check
      run: deno check **/*.ts **/*.tsx
      
    - name: Run tests
      run: deno test --allow-all --coverage=coverage
      
    - name: Generate coverage report
      run: deno coverage coverage --lcov --output=coverage.lcov
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.lcov
        fail_ci_if_error: true

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Deno
      uses: denoland/setup-deno@v1
      with:
        deno-version: ${{ env.DENO_VERSION }}
        
    - name: Cache dependencies
      run: deno cache --reload deno.json
      
    - name: Build application
      run: deno task build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: _fresh/
        retention-days: 7

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Deno
      uses: denoland/setup-deno@v1
      with:
        deno-version: ${{ env.DENO_VERSION }}
        
    - name: Setup Node.js for Wrangler
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Wrangler
      run: npm install -g wrangler
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: _fresh/
        
    - name: Run pre-deployment checks
      run: deno run -A scripts/pre-deploy-checks.ts
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        
    - name: Deploy to Cloudflare Workers (Staging)
      run: wrangler deploy --env development
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        
    - name: Run smoke tests
      run: deno run --allow-net scripts/smoke-tests.ts --env staging
      env:
        STAGING_URL: ${{ secrets.STAGING_URL }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Deno
      uses: denoland/setup-deno@v1
      with:
        deno-version: ${{ env.DENO_VERSION }}
        
    - name: Setup Node.js for Wrangler
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Wrangler
      run: npm install -g wrangler
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: _fresh/
        
    - name: Run pre-deployment checks
      run: deno run -A scripts/pre-deploy-checks.ts
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        
    - name: Deploy to Cloudflare Workers (Production)
      run: wrangler deploy --env production
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        
    - name: Run smoke tests
      run: deno run --allow-net scripts/smoke-tests.ts --env production
      env:
        PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
        
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "üöÄ Production deployment successful!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: success()
        
    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "‚ùå Production deployment failed!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: failure()