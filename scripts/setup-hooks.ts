#!/usr/bin/env -S deno run --allow-read --allow-write

/**
 * Setup Git hooks for pre-commit linting and formatting
 * Similar to Husky but using Deno's built-in tools
 */

import { ensureDir, exists } from "$std/fs/mod.ts";
import { join } from "$std/path/mod.ts";

const GIT_HOOKS_DIR = ".git/hooks";
const PRE_COMMIT_HOOK = "pre-commit";

const preCommitScript = `#!/bin/sh
# Pre-commit hook for Deno project
# Auto-generated by setup-hooks.ts

echo "üîç Running pre-commit checks..."

# Run lint-staged equivalent
deno task lint-staged

# Check if there are any changes after formatting
if ! git diff --quiet --exit-code; then
  echo "üìù Files were formatted. Please review and commit the changes."
  echo "üí° Tip: Run 'git add .' to stage the formatted files"
  exit 1
fi

echo "‚úÖ Pre-commit checks passed!"
`;

async function setupGitHooks() {
  try {
    // Check if we're in a git repository
    if (!(await exists(".git"))) {
      console.error("‚ùå Not a git repository. Please run 'git init' first.");
      Deno.exit(1);
    }

    // Ensure hooks directory exists
    await ensureDir(GIT_HOOKS_DIR);

    // Create pre-commit hook
    const hookPath = join(GIT_HOOKS_DIR, PRE_COMMIT_HOOK);
    await Deno.writeTextFile(hookPath, preCommitScript);

    // Make the hook executable
    await Deno.chmod(hookPath, 0o755);

    console.log("‚úÖ Git hooks setup successfully!");
    console.log(`üìÅ Created: ${hookPath}`);
    console.log("\nüéØ Pre-commit hook will now:");
    console.log("  ‚Ä¢ Format code with deno fmt");
    console.log("  ‚Ä¢ Run linter with deno lint");
    console.log("  ‚Ä¢ Type check with deno check");
    console.log("  ‚Ä¢ Only process staged files");
    console.log("\nüí° To bypass hooks temporarily: git commit --no-verify");
  } catch (error) {
    const msg = error instanceof Error ? error.message : String(error);
    console.error("‚ùå Failed to setup Git hooks:", msg);
    Deno.exit(1);
  }
}

if (import.meta.main) {
  await setupGitHooks();
}